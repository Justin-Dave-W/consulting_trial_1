import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import "./chunk-GXQQXURF.js";
import {
  addUserFields
} from "./chunk-KWG4MUE3.js";
import {
  ApiKeyLogin,
  LoginWithI18n
} from "./chunk-O25O35J2.js";
import {
  useBiLogger,
  useErrorReporter
} from "./chunk-7VND5WMC.js";
import "./chunk-WN3D6AOY.js";
import {
  ConfirmInput,
  Text,
  Trans,
  require_react,
  useExit,
  useTranslation
} from "./chunk-OH3G6JMX.js";
import "./chunk-W423UTD3.js";
import "./chunk-2K5KKUL3.js";
import "./chunk-YU54OBFT.js";
import "./chunk-XMTHMR2B.js";
import "./chunk-VSMZTFUW.js";
import "./chunk-2CPXK3HU.js";
import "./chunk-F6DVF5WQ.js";
import "./chunk-GNB7T7J7.js";
import {
  require_lib
} from "./chunk-CVJG3VZM.js";
import {
  __toESM,
  init_esm_shims
} from "./chunk-PYIAC2GK.js";

// src/components/LoginCommand/index.ts
init_esm_shims();

// src/components/LoginCommand/LoginCommand.tsx
init_esm_shims();
var import_react2 = __toESM(require_react(), 1);
var import_variant = __toESM(require_lib(), 1);

// src/components/LoginCommand/AlreadyLoggedIn.tsx
init_esm_shims();
var import_react = __toESM(require_react(), 1);
var AlreadyLoggedIn = ({ userInfo, onSubmit }) => {
  const { t } = useTranslation();
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement(
    Trans,
    {
      i18nKey: "login_command.already_logged_in.warning",
      components: [/* @__PURE__ */ import_react.default.createElement(Text, { skin: "info" })],
      values: { email: userInfo.email }
    }
  ), /* @__PURE__ */ import_react.default.createElement(
    ConfirmInput,
    {
      label: t("login_command.already_logged_in.confirm"),
      initialValue: true,
      onSubmit
    }
  ));
};

// src/components/LoginCommand/LoginCommand.tsx
var LoginState = (0, import_variant.variant)({
  PendingUserConfirmation: {},
  InProgress: {},
  Success: (0, import_variant.fields)()
});
var LoginCommand = ({
  apiKeyToken,
  userInfo: initialUserInfo
}) => {
  const exit = useExit();
  const errorReporter = useErrorReporter();
  const biLogger = useBiLogger();
  const [loginState, setLoginState] = (0, import_react2.useState)(
    initialUserInfo == null ? LoginState.InProgress() : LoginState.PendingUserConfirmation()
  );
  const handleLogin = (0, import_react2.useCallback)(
    ({ userInfo }) => {
      errorReporter.setUser({ id: userInfo.userId });
      addUserFields(biLogger, userInfo.userId);
      setLoginState(LoginState.Success({ userInfo }));
    },
    [setLoginState, errorReporter, biLogger]
  );
  return /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, initialUserInfo && /* @__PURE__ */ import_react2.default.createElement(
    AlreadyLoggedIn,
    {
      userInfo: initialUserInfo,
      onSubmit: (relogin) => relogin && setLoginState(LoginState.InProgress())
    }
  ), (0, import_variant.match)(loginState, {
    PendingUserConfirmation: () => null,
    InProgress: () => apiKeyToken ? /* @__PURE__ */ import_react2.default.createElement(
      ApiKeyLogin,
      {
        token: apiKeyToken,
        onLogin: handleLogin,
        onError: exit
      }
    ) : /* @__PURE__ */ import_react2.default.createElement(LoginWithI18n, { onLogin: handleLogin, onError: exit }),
    Success: ({ userInfo }) => /* @__PURE__ */ import_react2.default.createElement(
      Trans,
      {
        i18nKey: "login_command.success",
        components: [/* @__PURE__ */ import_react2.default.createElement(Text, { skin: "info" })],
        values: { email: userInfo.email }
      }
    )
  }));
};
export {
  LoginCommand
};
//# sourceMappingURL=LoginCommand-LQDJPLIG.js.map