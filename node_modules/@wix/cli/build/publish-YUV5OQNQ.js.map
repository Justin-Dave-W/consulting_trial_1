{"version":3,"sources":["../../cli-site-old/src/publish/index.ts","../../cli-site-old/src/publish/publish.ts","../../cli-site-old/src/pages-types-client/index.ts","../../../node_modules/@wix/ambassador-typok-v1-siterevision/http.impl.ts"],"sourcesContent":["export { publish } from './publish.js';\n","import { URL } from 'node:url';\nimport { exit } from 'node:process';\nimport { DeploymentOperation } from '@wix/ambassador-velo-apps-v1-app/types';\nimport {\n  getDeploymentPipelineDescription,\n  publishDeployment,\n} from '@wix/ambassador-document-management-editor-deployments-v1-deployment/http';\nimport { DeploymentPipelinesStatus } from '@wix/ambassador-document-management-editor-deployments-v1-deployment/types';\nimport prompts from 'prompts';\nimport { isType } from 'variant';\nimport chalk from 'chalk';\nimport { writeCrashReport } from '@wix/cli-debug-log';\nimport { getDebugLogFilePath } from '@wix/cli-core-definitions';\nimport type { CommandServices } from '@wix/cli-command-contract';\nimport { CliError, CliErrorCode } from '@wix/cli-error';\nimport { getDefaultBranch } from '../git/index.js';\nimport {\n  deployGridApp,\n  DeploymentSource,\n  getDeploymentStatus,\n} from '../gridapp/deployApp.js';\nimport type { ProjectModel } from '../model.js';\nimport { getLatestRevision } from '../pages-types-client/index.js';\nimport { httpRequest } from '../http-request.js';\nimport { isSiteNotPublishedError } from '../utils.js';\nimport { createLogger } from '../logger.js';\nimport { createI18nT } from '../i18n.js';\nimport { authenticate } from '../authentication.js';\n\nconst toBaseSiteUrl = (fullUrl: string) => {\n  const url = new URL(fullUrl);\n  return `${url.protocol}//${url.host}${url.pathname}`;\n};\n\nexport async function publish(\n  model: ProjectModel,\n  { biLogger, errorReporter }: CommandServices,\n  options: {\n    source?: 'local' | 'remote';\n    approvePreview?: true;\n    force?: true;\n  }\n) {\n  const authState = await authenticate({\n    metaSiteId: model.metaSiteId,\n    biLogger,\n    errorReporter,\n  });\n  const t = createI18nT();\n  const logger = createLogger({ t });\n\n  const defaultBranchName = await getDefaultBranch((e) =>\n    writeCrashReport(getDebugLogFilePath(model.projectFolder), e)\n  );\n\n  const whatToPublish = options.source\n    ? { value: options.source }\n    : await prompts(\n        {\n          type: 'select',\n          name: 'value',\n          message: logger.t('publish_command.prompt_what_to_publish'),\n          choices: [\n            {\n              title: chalk.cyan(\n                defaultBranchName\n                  ? logger.t(\n                      'publish_command.prompt_what_to_publish_choice_remote',\n                      {\n                        branchName: defaultBranchName,\n                      }\n                    )\n                  : logger.t(\n                      'publish_command.prompt_what_to_publish_choice_remote_fallback'\n                    )\n              ),\n              value: 'remote',\n            },\n            {\n              title: chalk.cyan(\n                logger.t('publish_command.prompt_what_to_publish_choice_local')\n              ),\n              value: 'local',\n            },\n          ],\n        },\n        {\n          onCancel: () => {\n            logger.logAborting();\n            exit(130 /* SIGINT */);\n          },\n        }\n      );\n\n  const deploymentSource =\n    whatToPublish.value === 'local'\n      ? DeploymentSource.local()\n      : DeploymentSource.remote({});\n\n  let preview;\n  const logPreviewed = logger.logPreviewing();\n\n  try {\n    preview = await deployGridApp({\n      model,\n      operation: DeploymentOperation.RC,\n      source: deploymentSource,\n      authState,\n    });\n\n    logPreviewed.success();\n  } catch (err) {\n    if (isSiteNotPublishedError(err)) {\n      logPreviewed.stop();\n      logger.logPreviewUnsupported();\n    } else {\n      logPreviewed.fail();\n      throw err;\n    }\n  }\n\n  const latestRevision = await getLatestRevision({ authState, logger });\n  const currentRevision = preview?.deployedRevision ?? model.revision;\n\n  logger.logPublishRevision({\n    branchName: defaultBranchName,\n    isLocalDeployment: isType(deploymentSource, DeploymentSource.local),\n    currentRevision,\n    latestRevision,\n    preview,\n  });\n\n  const shouldPublish = options.approvePreview\n    ? { value: true }\n    : await prompts({\n        type: 'confirm',\n        name: 'value',\n        message: logger.t('publish_command.prompt_continue_with_publish'),\n        initial: true,\n      });\n\n  const publish = shouldPublish.value;\n\n  if (publish) {\n    const logDeployed = logger.logDeploying();\n\n    // Use preview as an original deployment, but if preview wasn't created, created GA deploument.\n    // We need this logic in order to support limitation related to publishing unpublished sites.\n    const deployment =\n      preview ??\n      (await deployGridApp({\n        model,\n        authState,\n        operation: DeploymentOperation.GA,\n        source: deploymentSource,\n      }));\n\n    const { deploymentId, deploymentUrl, isPublishPipelineDeployment } =\n      deployment;\n\n    let deploymentStatus;\n    try {\n      deploymentStatus = !isPublishPipelineDeployment\n        ? DeploymentPipelinesStatus.SUCCESS\n        : await getDeploymentStatus({\n            deploymentId,\n            authState,\n          });\n    } catch (err) {\n      logDeployed.fail();\n      throw err;\n    }\n\n    if (deploymentStatus === DeploymentPipelinesStatus.SUCCESS) {\n      logDeployed.success();\n    }\n\n    let skipPipelineCheck;\n    if (deploymentStatus === DeploymentPipelinesStatus.ERROR) {\n      logDeployed.fail();\n\n      try {\n        const { data } = await httpRequest(\n          {\n            type: 'editor',\n            authState,\n          },\n          getDeploymentPipelineDescription({\n            deploymentId: deployment.deploymentId,\n            deploymentPipelinesIds: ['5c696513-2584-4f19-ae0f-a559dd649482'], // Velo Pipeline ID\n          }),\n          { retries: 2 }\n        );\n\n        if (data.pipelinesDescription?.length) {\n          const { pipelinesDescription } = data;\n          logger.logPipelineErrorInformation({ pipelinesDescription });\n        }\n      } catch (err) {\n        throw new CliError({\n          code: CliErrorCode.FailedToGetDeploymentPipelineDescription(),\n          cause: err,\n        });\n      }\n\n      logger.logForceDeployWarning();\n\n      const shouldSkipPipelineCheck = options.force\n        ? { value: true }\n        : await prompts({\n            type: 'confirm',\n            name: 'value',\n            message: t('publish_command.prompt_publish_with_error'),\n            initial: true,\n          });\n\n      skipPipelineCheck = shouldSkipPipelineCheck.value;\n    }\n\n    if (\n      deploymentStatus === DeploymentPipelinesStatus.SUCCESS ||\n      skipPipelineCheck\n    ) {\n      const logPublished = logger.logPublishing();\n      try {\n        await httpRequest(\n          {\n            type: 'editor',\n            authState,\n          },\n          publishDeployment({\n            deploymentId,\n            skipPipelineCheck,\n          }),\n          { retries: 2 }\n        );\n      } catch (err) {\n        logPublished.fail();\n        throw new CliError({\n          code: CliErrorCode.FailedToPublishDeployment(),\n          cause: err,\n        });\n      }\n\n      logPublished.success({\n        siteUrl: toBaseSiteUrl(deploymentUrl),\n      });\n    }\n  } else {\n    logger.logPublishAborted();\n  }\n}\n","import type { AuthState } from '@wix/cli-auth';\nimport { getSiteRevision } from '@wix/ambassador-typok-v1-siterevision/http';\nimport { httpRequest } from '../http-request.js';\nimport type { Logger } from '../logger.js';\n\nexport const getLatestRevision = async (opts: {\n  authState: AuthState;\n  logger: Logger;\n}) => {\n  try {\n    const pagesResponse = await httpRequest(\n      {\n        type: 'editor',\n        authState: opts.authState,\n      },\n      getSiteRevision({})\n    );\n    return pagesResponse.data.siteRevision?.revision ?? null;\n  } catch (e) {\n    opts.logger.logFailedToGetLatestRevision(e);\n  }\n  return null;\n};\n",null],"mappings":"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","names":["_a","prompts","publish"]}