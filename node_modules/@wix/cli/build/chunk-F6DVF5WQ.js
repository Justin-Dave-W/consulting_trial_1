import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  getTestOverrides,
  z
} from "./chunk-GNB7T7J7.js";
import {
  CliError,
  CliErrorCode
} from "./chunk-CVJG3VZM.js";
import {
  init_esm_shims
} from "./chunk-PYIAC2GK.js";

// ../cli-data-dir/src/index.ts
init_esm_shims();
import { resolve } from "node:path";
import { homedir } from "node:os";
function getDataDirPath() {
  return getTestOverrides().dataDir ?? resolve(homedir(), ".wix");
}

// ../cli-fs/src/index.ts
init_esm_shims();
import {
  access,
  readFile as fsReadFile,
  writeFile,
  mkdir
} from "node:fs/promises";
import { dirname, join, relative } from "node:path";
import { EOL } from "node:os";

// ../cli-fs/src/schemas.ts
init_esm_shims();
var packageJsonSchema = z.object({
  dependencies: z.record(z.string()).optional(),
  devDependencies: z.record(z.string()).optional(),
  peerDependencies: z.record(z.string()).optional()
});

// ../cli-fs/src/index.ts
function toJsonString(object, opts) {
  return JSON.stringify(object, null, opts?.spaces).concat(EOL);
}
async function writeJson(filePath, object, opts) {
  const str = toJsonString(object, opts);
  await outputDir(dirname(filePath));
  try {
    await writeFile(filePath, str, "utf-8");
  } catch (e) {
    throw new CliError({
      code: CliErrorCode.FailedToWriteJson({ filePath }),
      cause: e
    });
  }
}
async function readJson(file) {
  let content = null;
  try {
    content = await fsReadFile(file, "utf-8");
  } catch (e) {
    throw new CliError({
      code: CliErrorCode.FailedToReadJson({ filePath: file }),
      cause: e
    });
  }
  try {
    return JSON.parse(content);
  } catch (e) {
    throw new CliError({
      code: CliErrorCode.InvalidJsonFile({ filePath: file }),
      cause: e
    });
  }
}
async function readFile(file, encoding) {
  try {
    return await fsReadFile(file, encoding);
  } catch (e) {
    throw new CliError({
      code: CliErrorCode.FailedToReadFile({ filePath: file }),
      cause: e
    });
  }
}
function pathExists(path) {
  return access(path).then(() => true).catch(() => false);
}
async function outputFile(file, content) {
  await outputDir(dirname(file));
  try {
    await writeFile(file, content, "utf-8");
  } catch (e) {
    throw new CliError({
      code: CliErrorCode.FailedToWriteFile({ filePath: file }),
      cause: e
    });
  }
}
async function outputDir(dir) {
  try {
    await mkdir(dir, { recursive: true });
  } catch (e) {
    throw new CliError({
      code: CliErrorCode.FailedToCreateDir({ dirPath: dir }),
      cause: e
    });
  }
}
async function readPackageJson(projectFolder) {
  const packageJsonPath = join(projectFolder, "package.json");
  const json = await readJson(packageJsonPath);
  const parsedPackageJson = await packageJsonSchema.safeParseAsync(json);
  if (!parsedPackageJson.success) {
    throw new CliError({
      code: CliErrorCode.InvalidConfigSchemaError({
        configPath: packageJsonPath,
        zodError: parsedPackageJson.error
      }),
      cause: parsedPackageJson.error
    });
  }
  return json;
}
function readPackageJsonContent(projectFolder) {
  return readFile(join(projectFolder, "package.json"), "utf-8");
}

export {
  getDataDirPath,
  writeJson,
  readJson,
  readFile,
  pathExists,
  outputFile,
  outputDir,
  readPackageJson,
  readPackageJsonContent
};
//# sourceMappingURL=chunk-F6DVF5WQ.js.map