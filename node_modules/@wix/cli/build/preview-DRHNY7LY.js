import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  DeploymentSource,
  deployGridApp,
  getDefaultBranch,
  require_prompts
} from "./chunk-DRTGGSXY.js";
import {
  isSiteNotPublishedError
} from "./chunk-K4EZRW26.js";
import "./chunk-QKXNIB4D.js";
import {
  createLogger
} from "./chunk-RNE7RRCK.js";
import {
  createI18nT
} from "./chunk-2G7FRAIA.js";
import "./chunk-CNXKF7E3.js";
import {
  authenticate
} from "./chunk-PAPTRQZR.js";
import "./chunk-EDFOB3LN.js";
import "./chunk-LZJPV4CP.js";
import "./chunk-6XRFJZTQ.js";
import "./chunk-E2POOOG2.js";
import "./chunk-OJHDGJWP.js";
import {
  DeploymentOperation
} from "./chunk-DDC4C6V6.js";
import "./chunk-KWG4MUE3.js";
import "./chunk-O25O35J2.js";
import {
  writeCrashReport
} from "./chunk-7VND5WMC.js";
import "./chunk-WN3D6AOY.js";
import "./chunk-OH3G6JMX.js";
import "./chunk-W423UTD3.js";
import "./chunk-2K5KKUL3.js";
import "./chunk-YU54OBFT.js";
import "./chunk-XMTHMR2B.js";
import "./chunk-VSMZTFUW.js";
import {
  getDebugLogFilePath
} from "./chunk-2CPXK3HU.js";
import "./chunk-F6DVF5WQ.js";
import "./chunk-GNB7T7J7.js";
import "./chunk-CVJG3VZM.js";
import {
  __toESM,
  init_esm_shims
} from "./chunk-PYIAC2GK.js";

// ../cli-site-old/src/preview/index.ts
init_esm_shims();

// ../cli-site-old/src/preview/preview.ts
init_esm_shims();
import { exit } from "node:process";
var import_prompts = __toESM(require_prompts(), 1);
async function preview(model, { biLogger, errorReporter }, options) {
  const authState = await authenticate({
    metaSiteId: model.metaSiteId,
    biLogger,
    errorReporter
  });
  const t = createI18nT();
  const logger = createLogger({ t });
  const defaultBranchName = await getDefaultBranch(
    (e) => writeCrashReport(getDebugLogFilePath(model.projectFolder), e)
  );
  const whatToPreview = options.source ? { value: options.source } : await (0, import_prompts.default)(
    {
      type: "select",
      name: "value",
      message: logger.t("preview_command.prompt_what_to_preview"),
      choices: [
        {
          title: defaultBranchName ? logger.t(
            "preview_command.prompt_what_to_preview_choice_latest",
            {
              branchName: defaultBranchName
            }
          ) : logger.t(
            "preview_command.prompt_what_to_preview_choice_latest_fallback"
          ),
          value: "remote"
        },
        {
          title: logger.t(
            "preview_command.prompt_what_to_preview_choice_local"
          ),
          value: "local"
        }
      ]
    },
    {
      onCancel: () => {
        logger.logAborting();
        exit(
          130
          /* SIGINT */
        );
      }
    }
  );
  const deploymentSource = whatToPreview.value === "local" ? DeploymentSource.local() : DeploymentSource.remote({});
  logger.logCreatingPreview();
  try {
    const preview2 = await deployGridApp({
      model,
      operation: DeploymentOperation.RC,
      source: deploymentSource,
      authState
    });
    logger.logPreviewCreated(
      preview2.deploymentShortUrl ?? preview2.deploymentUrl
    );
  } catch (err) {
    if (isSiteNotPublishedError(err)) {
      logger.logPreviewUnsupported();
    } else {
      throw err;
    }
  }
}
export {
  preview
};
//# sourceMappingURL=preview-DRHNY7LY.js.map